[{"/Users/catherinecheng/Desktop/411_project/frontend/src/index.js":"1","/Users/catherinecheng/Desktop/411_project/frontend/src/App.js":"2"},{"size":157,"mtime":1627036295387,"results":"3","hashOfConfig":"4"},{"size":4995,"mtime":1627088164378,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"8"},"xm81wb",{"filePath":"9","messages":"10","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"11"},"/Users/catherinecheng/Desktop/411_project/frontend/src/index.js",[],["12","13"],"/Users/catherinecheng/Desktop/411_project/frontend/src/App.js",["14"],"import './App.css';\nimport React, {useState, useEffect} from \"react\";\nimport Axios from 'axios';\n\nfunction App() {\n  const [RestaurantName, setRestaurantName] = useState('');\n  const [Review, setReview] = useState('');\n  const [RestaurantReviewList, setRestaurantReviewList] = useState([]);\n  const [newReview, setNewReview] = useState(\"\");\n  const [searchValue, setSearchValue] = useState('');\n  const [ReviewList, setReviewList] = useState([]);\n  const [searchmeal, setsearchmeal] = useState('');\n  const [MealList, setMealList] = useState([]);\n\n  useEffect(() => {\n    Axios.get('http://localhost:3002/api/get').then((response) => {\n      setRestaurantReviewList(response.data)\n    })\n  },[])\n\n  const getmax = (searchmeal) => {\n    Axios.patch('http://localhost:3002/api/maxvalue/', {searchmeal: searchmeal}).then((response) => {\n          setMealList(response.data)\n        })\n      };\n\n  const submitReview = () => {\n    Axios.post('http://localhost:3002/api/insert', {\n      RestaurantName: RestaurantName,\n      RestaurantReview: Review\n    });\n\n\n    setRestaurantReviewList([\n      ...RestaurantReviewList,\n      {\n        RestaurantName: RestaurantName,\n        RestaurantReview: Review\n      },\n    ]);\n  };\n\n  const searchRes = (searchValue) => {\n    Axios.patch('http://localhost:3002/api/search/', {searchValue: searchValue}).then((response) => {\n      setRestaurantReviewList(response.data)\n    })\n  };\n\n  const deleteReview = (RestaurantName) => {\n    Axios.delete(`http://localhost:3002/api/delete/${RestaurantName}`);\n  };\n\n  const updateReview = (RestaurantName) => {\n    Axios.put(`http://localhost:3002/api/update`, {\n      RestaurantName: RestaurantName,\n      RestaurantReview: newReview\n    });\n    setNewReview(\"\")\n  };\n\n  const longestRevew = () => {\n    Axios.get(`http://localhost:3002/api/getLongest`).then((response) => {\n      setReviewList(response.data)\n    });\n\n    setReviewList([\n      ...ReviewList,\n      {\n        RestaurantName: RestaurantName,\n        RestaurantReview: Review\n      },\n    ]);\n  };\n//   Axios.get('http://localhost:3002/api/get').then((response) => {\n//     setRestaurantReviewList(response.data)\n//   })\n// },[])\n  return (\n    <div className=\"App\">\n      <h1>Find a Restaurant!</h1>\n      <div className=\"form\">\n        <label>Restaurant name: </label>\n        <input type=\"text\" name=\"RestaurantSearch\" placeholder = \"Name\" onChange={(e) => {\n          setSearchValue(e.target.value)\n        } }/>\n        <button onClick={() => searchRes(searchValue)}> Search</button>\n        \n      </div>\n\n\n      \n\n      <div className=\"form\">\n        \n              \n        {RestaurantReviewList.map((val) => {\n          return (\n            <div className = \"card\">\n              <h1> {val.name} </h1>\n              <p>Restaurant Review: {val.overallRating}</p>\n              <p>Price Level: {val.priceLevel}</p>\n              <p>Address: {val.streetAddress}, {val.city}, {val.states} {val.postalCode}</p>\n              <p>Number: {val.telephone}</p>\n              <p>{val.description}</p>\n              <p>{val.timeofpub}</p>\n              <input type=\"text\" id=\"updateInput\" onChange={(e) => {\n                setNewReview(e.target.value)\n              } }/>\n              <button onClick={() => {\n                updateReview(val.name)\n              }}> Rate</button>\n              </div>\n          );\n          \n        })}\n        <h1>Add a Restaurant!</h1>\n        <label>Restaurant Name to modify:</label>\n        <input type=\"text\" name=\"RestaurantName\" placeholder = \"Name\" onChange={(e) => {\n          setRestaurantName(e.target.value)\n        } }/>\n        <label> Rating:</label>\n        <input type=\"text\" name=\"Review\" placeholder = \"Skip if to delete\" onChange={(e) => {\n          setReview(e.target.value)\n        }}/>\n\n        <button onClick={submitReview}> Submit</button>\n        <button onClick={() => { deleteReview(RestaurantName) }}> Delete</button>\n\n\n      </div>\n\n      <h1>How many meals this Restaurant have?: </h1>\n        <input type=\"text\" name=\"RestaurantSearch\" placeholder = \"Name\" onChange={(e) => {\n          setsearchmeal(e.target.value)\n        } }/>\n        <button onClick={() => getmax(searchmeal)}> Search</button>\n\n      {MealList.map((val) => {\n        return (\n          <div className = \"card\">\n          <h1> The number of meals in this Restaurant! </h1>\n             <p>totally</p >\n            <p> {val.count} </p >\n            <p> in the </p >\n            <p> {val.nameofres} </p >\n            <p>!</p >\n\n            </div>\n        );\n\n      })}\n      {/* <div className=\"form\">\n        <h1>Longest Review under each restaurant!</h1>\n        <button onClick={longestRevew()}> Show me </button>\n        {ReviewList.map((val) => {\n          return (\n            <div className = \"card\">\n              <h1>{val.name}</h1>\n              <p>{val.rating}</p>\n              <p>{val.description}</p>\n\n              </div>\n          )\n        })}\n      </div> */}\n    </div>\n  );\n}\n\nexport default App;\n",{"ruleId":"15","replacedBy":"16"},{"ruleId":"17","replacedBy":"18"},{"ruleId":"19","severity":1,"message":"20","line":61,"column":9,"nodeType":"21","messageId":"22","endLine":61,"endColumn":21},"no-native-reassign",["23"],"no-negated-in-lhs",["24"],"no-unused-vars","'longestRevew' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]